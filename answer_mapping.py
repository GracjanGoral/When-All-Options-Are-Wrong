import logging
import os
from abc import ABC, abstractmethod

from openai import OpenAI

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


class Mapper(ABC):
    """
    An abstract class that defines the interface for mapping model answers to predefined options.
    """

    @staticmethod
    def instruction(input_string, model_answer):
        instruction = f"""
          Use the following rules to map the model's answer to the letters 'A', 'B', or 'C':
          1. Return 'A' or 'B' if the model gives one of the options.
          2. If the model gives a letter 'A' or 'B' but then proposes a different answer, return the letter 'C'.
          3. If the model says that there is no correct answer, return the letter 'C'.
          Respond with the letter 'A', 'B', or 'C':

          Options: {input_string}
          Model's Answer: {model_answer}
          """

        return instruction

    @abstractmethod
    def map_answer(self, context_question: str, model_answer: str) -> str:
        """
        Maps the model's answer to the correct option based on the context and returns the mapped result.

        Args:
            context_question (str): The input context and options as a string.
            model_answer (str): The answer generated by the model to be mapped.

        Returns:
            str: The final mapped answer based on the context and options provided.
        """
        raise NotImplementedError("This method must be implemented.")


class MapAnswerOpenAI(Mapper):
    """
    A class that handles mapping model answers to predefined options using OpenAI's models.
    """

    def __init__(
        self, name_of_model: str, temp: float = 0.0, max_tokens: int = 16
    ) -> None:
        """
        Initializes the MapAnswerOpenAI instance with the specified model.

        Args:
            name_of_model (str): The name of the OpenAI model to use.

        Raises:
            KeyError: If the 'OPENAI_API_KEY' environment variable is not set.
        """
        try:
            self.api_key: str = os.environ["OPENAI_API_KEY"]
        except KeyError:
            raise KeyError("The 'OPENAI_API_KEY' environment variable is not set.")

        try:
            self.open_ai = OpenAI(api_key=self.api_key)
            self.model_name = name_of_model
        except Exception as e:
            logger.error(f"Failed to initialize OpenAI client: {e}")
            raise RuntimeError("Failed to initialize OpenAI client") from e

        self.temp = temp
        self.max_tokens = max_tokens

    def map_answer(self, context_question: str, model_answer: str) -> str:
        """
        Maps the model's answer to the correct option based on the context and returns the mapped result.

        Args:
            context_question (str): The input context and options as a string.
            model_answer (str): The answer generated by the model to be mapped.

        Returns:
            str: The final mapped answer based on the context and options provided.

        Raises:
            RuntimeError: If the API call to OpenAI fails.
            ValueError: If there is an issue creating the JSON payload.
        """
        try:
            json_result = self.instruction(context_question, model_answer)
            response = self.open_ai.chat.completions.create(
                model=self.model_name,
                messages=[{"role": "user", "content": json_result}],
                temperature=self.temp,
                max_tokens=self.max_tokens,
            )
            return response.model_dump()["choices"][0]["message"]["content"]
        except Exception as e:
            logger.error(f"OpenAI API call failed: {e}")
            raise RuntimeError("Failed to map answer with OpenAI API") from e


class MapAnswerToNone(Mapper):
    """
    A class that always maps the model's answer to 'None'.
    """

    def map_answer(self, context_question: str, model_answer: str) -> str:
        """
        Maps the model's answer to 'None' regardless of the context.

        Args:
            context_question (str): The input context and options as a string.
            model_answer (str): The answer generated by the model to be mapped.

        Returns:
            str: 'None'
        """
        return "None"
